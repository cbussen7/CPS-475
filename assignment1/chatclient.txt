var net = require('net');
 
if(process.argv.length != 4){
	console.log("Usage: node %s <host> <port>", process.argv[1]);
	process.exit(1);	
}

var host=process.argv[2];
var port=process.argv[3];

if(host.length >253 || port.length >5 ){
	console.log("Invalid host or port. Try again!\nUsage: node %s <port>", process.argv[1]);
	process.exit(1);	
}

var client = new net.Socket();
console.log("Simple chatclient.js developed by Christopher Bussen and Phu Phung, SecAD");
console.log("Connecting to: %s:%s", host, port);

client.connect(port,host, connected);

function connected(){
	loginsync();
	key();
}

var readlineSync = require('readline-sync');
var username;
var password;
function loginsync(){
	console.log("Connected to: %s:%s", client.remoteAddress, client.remotePort);
	console.log("You need to login before sending/receiving messages.")
	//wait for user's repsonse
	username = readlineSync.question('Username:');
	if(!inputValidated(username)) {
		console.log("Username must have at least 5 characters. Please try again!");
		loginsync();
		return;
	}
	//Handle the secret text (e.g. password)
	password = readlineSync.question('Password:', {
		//typed text on screen is hidden by `*`
		hideEchoBack: true 
	});
	if(!inputValidated(password)) {
		console.log("Password must have at least 5 characters. Please try again!");
		loginsync();
		return;
	}
	var login = `{"Username":"${username}","Password":"${password}"}`;
	client.write(login);
}

function inputValidated(data){
	if(data.length > 4){
		return true;
	}
	else{
		return false;
	}

}

client.on("data", data =>{
	console.log("Received data:" + data);
});
client.on("error", function(err){
	console.log("Error");
	process.exit(2);
});
client.on("close", function(data){
	console.log("Connection has been disconnected");
	process.exit(3);
});

function key(){
	const keyboard = require('readline').createInterface({
		input: process.stdin,
		output: process.stdout
	});
	keyboard.prompt();
	keyboard.on('line', (input) => {
		console.log(`You typed: ${input}`);
		if(input === ".exit"){
			client.destroy();
			console.log("Disconnected!");
			process.exit();
		}
		else
			client.write(input);
	});
}